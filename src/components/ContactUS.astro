---
// ContactForm.astro
// No external button import needed

// You can accept props to customize the form
interface Props {
  submitButtonText?: string;
  accessKey: string; // Required Web3Forms access key
}

const { 
  submitButtonText = "Send Message",
  accessKey 
} = Astro.props;
---

<div class="contact-form-wrapper bg-white shadow-xl rounded-lg p-8 border border-slate-100">
  <form
    action="https://api.web3forms.com/submit"
    method="POST"
    id="contact-form"
    class="needs-validation"
    novalidate>
    
    <input type="hidden" name="access_key" value={accessKey} />
    <input type="checkbox" class="hidden" style="display:none" name="botcheck" />
    
    <div class="mb-6">
      <label for="name" class="block text-sm font-medium text-slate-700 mb-1">Full Name</label>
      <input
        type="text"
        placeholder="John Doe"
        required
        class="w-full px-4 py-3 border placeholder:text-slate-400 rounded-md outline-none focus:ring-4 border-slate-300 focus:border-[#D32F2F] ring-[#D32F2F]/20 transition-all duration-300"
        name="name"
        id="name"
      />
      <div class="error-message text-[#D32F2F] text-sm mt-1" style="display: none;">
        Please provide your full name.
      </div>
    </div>
    
    <div class="mb-6">
      <label for="email_address" class="block text-sm font-medium text-slate-700 mb-1">Email Address</label>
      <input
        id="email_address"
        type="email"
        placeholder="you@example.com"
        name="email"
        required
        class="w-full px-4 py-3 border placeholder:text-slate-400 rounded-md outline-none focus:ring-4 border-slate-300 focus:border-[#D32F2F] ring-[#D32F2F]/20 transition-all duration-300"
      />
      <div class="error-message email-empty text-[#D32F2F] text-sm mt-1" style="display: none;">
        Please provide your email address.
      </div>
      <div class="error-message email-invalid text-[#D32F2F] text-sm mt-1" style="display: none;">
        Please provide a valid email address.
      </div>
    </div>
    
    <div class="mb-6">
      <label for="message" class="block text-sm font-medium text-slate-700 mb-1">Your Message</label>
      <textarea
        name="message"
        id="message"
        required
        placeholder="Tell us about your question or feedback..."
        class="w-full px-4 py-3 border placeholder:text-slate-400 rounded-md outline-none h-40 focus:ring-4 border-slate-300 focus:border-[#D32F2F] ring-[#D32F2F]/20 transition-all duration-300"
      ></textarea>
      <div class="error-message text-[#D32F2F] text-sm mt-1" style="display: none;">
        Please enter your message.
      </div>
    </div>
    
    <button 
      type="submit" 
      id="submit-button"
      class="w-full bg-gradient-to-r from-[#D32F2F] to-[#B71C1C] text-white font-medium py-3 px-6 rounded-full hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300 flex items-center justify-center"
    >
      <span>{submitButtonText}</span>
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6" />
      </svg>
    </button>
    
    <div id="form-result" class="mt-4 text-center font-medium rounded-md py-2 hidden"></div>
  </form>
</div>

<script>
  // Script will run after the document is loaded
  document.addEventListener("DOMContentLoaded", setupForm);
  document.addEventListener("astro:page-load", setupForm);
  document.addEventListener("astro:after-swap", setupForm);

  function setupForm() {
    const form = document.getElementById("contact-form");
    
    if (!form) return;
    
    const nameInput = document.getElementById("name");
    const emailInput = document.getElementById("email_address");
    const messageInput = document.getElementById("message");
    const result = document.getElementById("form-result");
    
    if (!nameInput || !emailInput || !messageInput || !result) return;
    
    // Clear existing event listeners
    const newForm = form.cloneNode(true);
    form.parentNode.replaceChild(newForm, form);
    
    // Get the new elements after cloning
    const nameField = document.getElementById("name");
    const emailField = document.getElementById("email_address");
    const messageField = document.getElementById("message");
    const submitButton = document.getElementById("submit-button");
    const formResult = document.getElementById("form-result");
    
    // Add input event listeners
    nameField.addEventListener("input", function() {
      validateField(nameField);
    });
    
    emailField.addEventListener("input", function() {
      validateField(emailField, true);
    });
    
    messageField.addEventListener("input", function() {
      validateField(messageField);
    });
    
    // Add focus and blur effects for better UX
    const formInputs = [nameField, emailField, messageField];
    formInputs.forEach(input => {
      input.addEventListener("focus", function() {
        this.parentElement.classList.add("focused");
      });
      
      input.addEventListener("blur", function() {
        this.parentElement.classList.remove("focused");
      });
    });
    
    // Handle form submission
    newForm.addEventListener("submit", function(e) {
      e.preventDefault(); // Prevent form from submitting by default
      
      // Validate all fields
      const nameValid = validateField(nameField);
      const emailValid = validateField(emailField, true);
      const messageValid = validateField(messageField);
      
      // If any validation fails, stop submission
      if (!nameValid || !emailValid || !messageValid) {
        // Focus on the first invalid field
        if (!nameValid) nameField.focus();
        else if (!emailValid) emailField.focus();
        else if (!messageValid) messageField.focus();
        return false;
      }
      
      // All validations passed, proceed with submission
      submitForm(newForm, formResult);
    });
  }
  
  function validateField(field, isEmail = false) {
    // Get the error message container
    const errorContainer = field.nextElementSibling;
    const emailEmptyError = document.querySelector(".email-empty");
    const emailInvalidError = document.querySelector(".email-invalid");
    
    // Clear previous validation state
    field.classList.remove("border-red-500");
    if (errorContainer) errorContainer.style.display = "none";
    
    // Handle email validation
    if (isEmail) {
      if (field.value.trim() === "") {
        field.classList.add("border-red-500");
        if (emailEmptyError) emailEmptyError.style.display = "block";
        if (emailInvalidError) emailInvalidError.style.display = "none";
        return false;
      } else if (!isValidEmail(field.value)) {
        field.classList.add("border-red-500");
        if (emailEmptyError) emailEmptyError.style.display = "none";
        if (emailInvalidError) emailInvalidError.style.display = "block";
        return false;
      }
      return true;
    }
    
    // Handle other fields
    if (field.value.trim() === "") {
      field.classList.add("border-red-500");
      if (errorContainer) errorContainer.style.display = "block";
      return false;
    }
    
    return true;
  }
  
  function isValidEmail(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  }
  
  function submitForm(form, result) {
    // Show loading state
    result.innerHTML = `
      <div class="flex items-center justify-center">
        <svg class="animate-spin h-5 w-5 mr-3 text-[#D32F2F]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Sending...
      </div>
    `;
    result.classList.remove("hidden", "bg-green-100", "bg-red-100", "text-green-700", "text-red-700");
    result.classList.add("flex", "bg-slate-100", "text-slate-700");
    
    // Prepare form data
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);
    const json = JSON.stringify(data);
    
    // Submit form
    fetch("https://api.web3forms.com/submit", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      body: json
    })
    .then(async (response) => {
      const json = await response.json();
      
      if (response.status === 200) {
        result.classList.remove("bg-slate-100", "text-slate-700");
        result.classList.add("bg-green-100", "text-green-700");
        result.innerHTML = `
          <div class="flex items-center">
            <svg class="h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            ${json.message || "Message sent successfully!"}
          </div>
        `;
        form.reset();
      } else {
        console.error(response);
        result.classList.remove("bg-slate-100", "text-slate-700");
        result.classList.add("bg-red-100", "text-red-700");
        result.innerHTML = `
          <div class="flex items-center">
            <svg class="h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
            ${json.message || "Something went wrong!"}
          </div>
        `;
      }
    })
    .catch((error) => {
      console.error(error);
      result.classList.remove("bg-slate-100", "text-slate-700");
      result.classList.add("bg-red-100", "text-red-700");
      result.innerHTML = `
        <div class="flex items-center">
          <svg class="h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
          Something went wrong!
        </div>
      `;
    })
    .finally(() => {
      // Hide message after 5 seconds
      setTimeout(() => {
        result.classList.add("hidden");
      }, 5000);
    });
  }
</script>

<style>
  .contact-form-wrapper {
    position: relative;
    z-index: 1;
  }
  
  .focused label {
    color: #D32F2F;
    font-weight: 500;
  }
  
  #form-result {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0.75rem;
    border-radius: 0.375rem;
  }
</style>