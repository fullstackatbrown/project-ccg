---
// ContactForm.astro
// No external button import needed

// You can accept props to customize the form
interface Props {
  submitButtonText?: string;
  accessKey: string; // Required Web3Forms access key
}

const { 
  submitButtonText = "Send Message",
  accessKey 
} = Astro.props;
---

<div class="contact-form-wrapper">
  <form
    action="https://api.web3forms.com/submit"
    method="POST"
    id="contact-form"
    class="needs-validation"
    novalidate>
    
    <input type="hidden" name="access_key" value={accessKey} />
    <input type="checkbox" class="hidden" style="display:none" name="botcheck" />
    
    <div class="mb-5">
      <input
        type="text"
        placeholder="Full Name"
        required
        class="w-full px-4 py-3 border placeholder:text-slate-400 rounded-md outline-none focus:ring-4 border-slate-300 focus:border-slate-600 ring-slate-100"
        name="name"
      />
      <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">
        Please provide your full name.
      </div>
    </div>
    
    <div class="mb-5">
      <label for="email_address" class="sr-only">Email Address</label>
      <input
        id="email_address"
        type="email"
        placeholder="Email Address"
        name="email"
        required
        class="w-full px-4 py-3 border placeholder:text-slate-400 rounded-md outline-none focus:ring-4 border-slate-300 focus:border-slate-600 ring-slate-100"
      />
      <div class="empty-feedback text-red-400 text-sm mt-1">
        Please provide your email address.
      </div>
      <div class="invalid-feedback text-red-400 text-sm mt-1">
        Please provide a valid email address.
      </div>
    </div>
    
    <div class="mb-3">
      <textarea
        name="message"
        required
        placeholder="Your Message"
        class="w-full px-4 py-3 border placeholder:text-slate-400 rounded-md outline-none h-36 focus:ring-4 border-slate-300 focus:border-slate-600 ring-slate-100"
      ></textarea>
      <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">
        Please enter your message.
      </div>
    </div>
    
    <button 
      type="submit" 
      class="w-full bg-slate-800 hover:bg-slate-900 text-white font-medium py-3 px-4 rounded-md transition-colors"
    >
      {submitButtonText}
    </button>
    <div id="form-result" class="mt-3 text-center"></div>
  </form>
</div>

<style>
  .invalid-feedback,
  .empty-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
  }
</style>

<script>
  // Using client:load directive to ensure the script runs after hydration
  document.addEventListener("astro:page-load", () => {
    const setupForm = () => {
      const form = document.getElementById("contact-form") as HTMLFormElement;
      const result = document.getElementById("form-result");
      
      if (!form || !result) return;

      form.addEventListener("submit", function (e) {
        e.preventDefault();
        form.classList.add("was-validated");
        if (!form.checkValidity()) {
          const invalidElement = form.querySelectorAll(":invalid")[0] as HTMLElement;
          if (invalidElement) {
            invalidElement.focus();
          }
          return;
        }
        const formData = new FormData(form);
        const object = Object.fromEntries(formData);
        const json = JSON.stringify(object);

        result.innerHTML = "Sending...";

        fetch("https://api.web3forms.com/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: json,
        })
          .then(async (response) => {
            let json = await response.json();
            if (response.status == 200) {
              result.classList.add("text-green-500");
              result.innerHTML = json.message;
            } else {
              console.log(response);
              result.classList.add("text-red-500");
              result.innerHTML = json.message;
            }
          })
          .catch((error) => {
            console.log(error);
            result.innerHTML = "Something went wrong!";
          })
          .then(function () {
            form.reset();
            form.classList.remove("was-validated");
            setTimeout(() => {
              result.style.display = "none";
            }, 5000);
          });
      });
    };

    // Setup the form when the page loads
    setupForm();

    // Also setup if this is part of a view transition
    document.addEventListener("astro:after-swap", setupForm);
  });
</script>