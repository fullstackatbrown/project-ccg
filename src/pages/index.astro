---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/common/Navbar.astro';
import Footer from '../components/common/Footer.astro';
import HeroSection from '../components/homepage/HeroSection.astro';
import WhoWeAreSection from '../components/homepage/WhoWeAreSection.astro';
import AlternateSection from '../components/homepage/AlternateSection.astro';
import AnnualReportSection from '../components/common/AnnualReportSection.astro';
import CompaniesSection from '../components/homepage/CompaniesSection.astro';
import '../styles/global.css';
import { contentfulClient } from "../lib/contentful";


const entries2 = await contentfulClient.getEntries({
  content_type: "images"
});

const heroImage = entries2.items
  .filter(entry => entry.fields.title === "Home - Main Image")[0]
  ?.fields?.images?.map(image => image.fields?.file?.url) || [];

const ourTeamImage = entries2.items
  .filter(entry => entry.fields.title === "Home - Our Team")[0]
  ?.fields?.images?.map(image => image.fields?.file?.url) || [];

const ourServicesImage = entries2.items
  .filter(entry => entry.fields.title === "Home - Our Services")[0]
  ?.fields?.images?.map(image => image.fields?.file?.url) || [];

const companyImages = entries2.items
  .filter(entry => entry.fields.title === "Home - Where We End Up")[0]
  ?.fields?.images?.map(image => image.fields?.file?.url) || [];


const homepageEntry = await contentfulClient.getEntries({
  content_type: "homepage"
});

const homepage = homepageEntry.items[0]?.fields || {};
const clubDescription = homepage.clubDescription || '';
const statBoxesRaw = homepage.whoWeAreStats || '';
const servicesDescription = homepage.ourServicesDescription || '';
const teamDescription = homepage.ourTeamDescription || '';

const statBoxes = statBoxesRaw
  .split('\n')
  .map(line => {
    const [value, label] = line.split(' - ').map(part => part.trim());
    return { value, label };
  })
  .filter(box => box.value && box.label);
---

<Layout>
  <div class="flex flex-col min-h-screen">
    <Navbar />
    <HeroSection heroImage={heroImage} />
    <WhoWeAreSection clubDescription={clubDescription} statBoxes={statBoxes} />
    <AlternateSection ourTeamImage={ourTeamImage} ourServicesImage={ourServicesImage} servicesDescription={servicesDescription} teamDescription={teamDescription}  />
    <AnnualReportSection />
    <CompaniesSection companyImages={companyImages} />
    <Footer />
  </div>
</Layout>

<style>
  /* Enhanced animation classes */
  .animate-element {
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 0.8s ease-out, transform 0.8s cubic-bezier(0.22, 1, 0.36, 1);
  }

  .animate-element.visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Staggered delays for smoother sequence */
  .delay-1 { transition-delay: 0.1s; }
  .delay-2 { transition-delay: 0.2s; }
  .delay-3 { transition-delay: 0.3s; }
  .delay-4 { transition-delay: 0.4s; }
  .delay-5 { transition-delay: 0.5s; }
  .delay-6 { transition-delay: 0.6s; }

  /* Slide in animations from different directions */
  .slide-in-left {
    opacity: 0;
    transform: translateX(-50px);
    transition: opacity 0.8s ease-out, transform 0.8s cubic-bezier(0.22, 1, 0.36, 1);
  }
  
  .slide-in-right {
    opacity: 0;
    transform: translateX(50px);
    transition: opacity 0.8s ease-out, transform 0.8s cubic-bezier(0.22, 1, 0.36, 1);
  }
  
  .slide-in-left.visible,
  .slide-in-right.visible {
    opacity: 1;
    transform: translateX(0);
  }

  /* Subtle scale animation for images */
  .scale-in {
    opacity: 0;
    transform: scale(0.92);
    transition: opacity 1s ease-out, transform 1s cubic-bezier(0.22, 1, 0.36, 1);
  }
  
  .scale-in.visible {
    opacity: 1;
    transform: scale(1);
  }
</style>

<script>
  // Enhanced Intersection Observer for smoother animations
  document.addEventListener('DOMContentLoaded', () => {
    const animatedElements = document.querySelectorAll('.animate-element, .slide-in-left, .slide-in-right, .scale-in');
    
    // Make hero section elements visible immediately
    const heroElements = document.querySelectorAll('.hero-section .animate-element, .hero-section .slide-in-left, .hero-section .slide-in-right, .hero-section .scale-in');
    
    if (heroElements.length > 0) {
      setTimeout(() => {
        heroElements.forEach(element => {
          element.classList.add('visible');
        });
      }, 100);
    }
    
    // Enhanced observer with better threshold options
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Add a slight delay before animation triggers for smoother experience
          setTimeout(() => {
            entry.target.classList.add('visible');
          }, 50);
          
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.15,
      rootMargin: '0px 0px -10% 0px'
    });
    
    animatedElements.forEach(element => {
      observer.observe(element);
    });
    
    // Optional: Add scroll-triggered parallax effect for certain elements
    const parallaxElements = document.querySelectorAll('.parallax-bg');
    
    window.addEventListener('scroll', () => {
      const scrollPosition = window.scrollY;
      
      parallaxElements.forEach(element => {
        const speed = element.getAttribute('data-speed') || 0.2;
        const yPos = -(scrollPosition * speed);
        element.style.transform = `translateY(${yPos}px)`;
      });
    });
  });
</script>