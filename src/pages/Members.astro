---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/common/Navbar.astro';
import Footer from '../components/common/Footer.astro';
import MembersSection from '../components/members/MembersSection.astro';
import '../styles/global.css';
import { contentfulClient } from "../lib/contentful";

const entries = await contentfulClient.getEntries({
  content_type: "member"
});
const entries2 = await contentfulClient.getEntries({
  content_type: "images"
});

const headerImage = entries2.items
  .filter(entry => entry.fields.title === "Team")[0]
  ?.fields?.images?.map(image => image.fields?.file?.url) || [];

const members = entries.items.map(entry => ({
  memberName: entry.fields.memberName,
  position: entry.fields.position,
  classYear: entry.fields.classYear,
  bibliography: entry.fields.bibliography,
  profileImage: entry.fields.profileImage?.fields?.file?.url || '',
  contactInformation: entry.fields.contactInformation,
  linkedIn: entry.fields.linkedIn
}));

const leadershipPositions = ['co-president (projects)', 'sourcing committee lead', 'project leader','co-president (internal development)','project manager'];
const leadershipMembers = members.filter(member => 
  typeof member.position === 'string' && leadershipPositions.includes(member.position.toLowerCase())
);
const otherMembers = members.filter(member => 
  typeof member.position === 'string' && !leadershipPositions.includes(member.position?.toLowerCase())
);
---

<Layout>
  <div class="flex flex-col min-h-screen">
    <Navbar />

    <!-- Hero Section with Parallax -->
    <section class="relative w-full h-[85vh] flex items-center justify-center overflow-hidden">
      <!-- Background Image with Parallax -->
      <div id="parallax-bg" class="absolute w-full h-full transform scale-110">
        <img 
          src={headerImage[0]}
          alt="Team photo" 
          class="w-full h-full object-cover object-center md:object-[50%_20%] transition-all duration-1000"
        >
      </div>

      <!-- Dark Gradient Overlay -->
      <div class="absolute w-full h-full bg-gradient-to-t from-[#0c1445] via-[#0c1445cc] to-[#0c144566]"></div>

      <!-- Overlay Text with Animated Entry -->
      <div class="absolute inset-0 flex flex-col items-start justify-end p-8 md:p-16 lg:p-24 text-content-animation">
        <div class="slide-up-animation">
          <h1 class="text-6xl md:text-7xl lg:text-8xl font-bold text-white mb-6" style="font-family: 'Almarai', sans-serif;">
              Meet Our Team
          </h1>
          <p class="text-xl md:text-2xl text-white opacity-90 max-w-2xl leading-relaxed">
            Shape your future in consulting with Brown's premier student consulting organization
          </p>
          <a href="#leadership" class="mt-8 inline-flex items-center px-8 py-3 bg-gradient-to-r from-[#D32F2F] to-[#B71C1C] text-white font-medium rounded-full hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300">
            View Members
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2 animate-bounce" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
            </svg>
          </a>
        </div>
      </div>
    </section>

    <!-- Leadership Section -->
    <MembersSection 
      title="Leadership" 
      members={leadershipMembers} 
      background="bg-[#0B144A14]" 
      id="leadership" 
      memberType="leadership" 
    />

    <!-- Consultants Section -->
    <MembersSection 
      title="Consultants" 
      members={otherMembers} 
      background="bg-white" 
      id="members" 
      memberType="other" 
    />

    <!-- Modal -->
    <div id="modal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <div id="modal-member-content"></div>
      </div>
    </div>

    <Footer />
  </div>
</Layout>

<style>
  /* Hero section animations */
  .slide-up-animation {
    animation: slideUp 1.2s forwards;
    animation-delay: 0.5s;
    opacity: 0;
    transform: translateY(50px);
  }
  
  @keyframes slideUp {
    0% {
      opacity: 0;
      transform: translateY(50px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Modal styling - Refined with better spacing and sizing */
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.75);
    z-index: 1000;
    justify-content: center;
    align-items: center;
    padding: 0 1rem;
    overflow-y: auto;
  }

  .modal-content {
    position: relative;
    background-color: white;
    width: 100%;
    max-width: 800px;
    max-height: 80vh;
    border-radius: 24px;
    overflow-y: auto;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    animation: modalFadeIn 0.3s ease;
    margin: 2rem auto;
    padding: 1.5rem;
  }

  @keyframes modalFadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .close {
    position: absolute;
    top: 16px;
    right: 20px;
    font-size: 28px;
    font-weight: bold;
    color: #0B144A;
    cursor: pointer;
    z-index: 10;
    transition: all 0.2s ease;
    height: 36px;
    width: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
  }

  .close:hover {
    color: #C32727;
    transform: rotate(90deg);
  }

  /* Responsive styles for modal */
  @media (max-width: 768px) {
    .modal-content {
      padding: 1.25rem;
      border-radius: 20px;
    }
    
    .close {
      top: 12px;
      right: 16px;
      font-size: 24px;
    }
  }

  @media (max-width: 640px) {
    .modal-content {
      padding: 1rem;
      border-radius: 16px;
      margin: 1rem;
    }
    
    .close {
      top: 10px;
      right: 14px;
      font-size: 22px;
    }
  }
</style>

<script define:vars={{ leadershipMembers, otherMembers }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Parallax effect for hero section
    const parallaxBg = document.getElementById('parallax-bg');
    
    window.addEventListener('scroll', function() {
      if (parallaxBg) {
        const scrollPosition = window.scrollY;
        const translateY = scrollPosition * 0.4;
        parallaxBg.style.transform = `translateY(${translateY}px) scale(1.1)`;
      }
    });

    // Modal handling
    const modal = document.getElementById('modal');
    const modalContent = document.getElementById('modal-member-content');
    const closeBtn = document.querySelector('.close');
    let currentOpenCard = null;

    // Function to open modal with improved styling
    function openModal(member, cardElement) {
      // Store reference to current card
      currentOpenCard = cardElement;
      
      // Add active state to the card (but don't change background)
      cardElement.classList.add('active-card');
      
      // Create modal content with refined styling and more compact layout
      modalContent.innerHTML = `
        <div class="modal-grid">
          <div class="modal-image">
            ${member.profileImage ? `<img src="${member.profileImage}" alt="${member.memberName}" />` : '<div class="placeholder-image"></div>'}
          </div>
          <div class="modal-text">
            <h2>${member.memberName}</h2>
            <p class="position-year">${member.position}, Class of ${member.classYear}</p>
            
            <!-- Red divider -->
            <div class="modal-divider"></div>
            
            <div class="bio">${member.bibliography || 'No biography available.'}</div>
            
            <div class="contact-section">
              <h3>Contact Information</h3>
              <div class="contact-info">
                <p>${member.contactInformation || 'Not provided'}</p>
              </div>
              
              ${member.linkedIn ? `
                <a href="${member.linkedIn}" target="_blank" class="linkedin-link">
                  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                  </svg>
                  Connect on LinkedIn
                </a>` : ''}
            </div>
          </div>
        </div>
      `;

      // Add specific styling for modal content
      const modalGrid = modalContent.querySelector('.modal-grid');
      modalGrid.style.display = 'grid';
      modalGrid.style.gridTemplateColumns = 'minmax(200px, 300px) 1fr';
      modalGrid.style.gap = '1.75rem';
      modalGrid.style.padding = '0.5rem';
      
      // Style modal image - SMALLER SIZE
      const modalImage = modalContent.querySelector('.modal-image');
      modalImage.style.position = 'relative';
      modalImage.style.borderRadius = '16px';
      modalImage.style.overflow = 'hidden';
      modalImage.style.height = '250px'; // REDUCED SIZE
      modalImage.style.width = '100%';
      modalImage.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.1)';
      modalImage.style.backgroundColor = '#f5f5f5';

      // Style image inside modal
      const img = modalImage.querySelector('img');
      if (img) {
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'cover';
        img.style.borderRadius = '16px';
      }

      // Style modal text
      const modalText = modalContent.querySelector('.modal-text');
      modalText.style.padding = '0';
      modalText.style.display = 'flex';
      modalText.style.flexDirection = 'column';
      
      // Style name
      const h2 = modalText.querySelector('h2');
      h2.style.fontFamily = "'Almarai', sans-serif";
      h2.style.fontSize = '1.75rem';
      h2.style.fontWeight = '700';
      h2.style.marginBottom = '0.25rem';
      h2.style.color = '#0B144A';
      
      // Style position/year
      const positionYear = modalText.querySelector('.position-year');
      positionYear.style.fontSize = '1rem';
      positionYear.style.fontWeight = '500';
      positionYear.style.color = '#C32727';
      positionYear.style.marginBottom = '0.75rem';
      
      // Style divider
      const divider = modalText.querySelector('.modal-divider');
      divider.style.display = 'flex';
      divider.style.alignItems = 'center';
      divider.style.marginBottom = '1rem';
      divider.style.marginTop = '0.5rem';
      divider.innerHTML = `
        <div style="width: 30px; height: 2px; background-color: #C32727;"></div>
        <div style="width: 6px; height: 6px; border-radius: 50%; background-color: #C32727; margin-left: 4px;"></div>
        <div style="width: 30px; height: 2px; background-color: #C32727; margin-left: 4px;"></div>
      `;
      
      // Style bio
      const bio = modalText.querySelector('.bio');
      bio.style.fontSize = '0.95rem';
      bio.style.lineHeight = '1.6';
      bio.style.color = '#444';
      bio.style.marginBottom = '1.25rem';
      bio.style.whiteSpace = 'pre-wrap';
      
      // Style contact section
      const contactSection = modalText.querySelector('.contact-section');
      contactSection.style.marginTop = 'auto';
      
      const contactTitle = contactSection.querySelector('h3');
      contactTitle.style.fontSize = '1.1rem';
      contactTitle.style.fontWeight = '600';
      contactTitle.style.color = '#0B144A';
      contactTitle.style.marginBottom = '0.5rem';
      
      // Style contact info
      const contactInfo = modalText.querySelector('.contact-info');
      contactInfo.style.fontSize = '0.9rem';
      contactInfo.style.padding = '0.75rem 1rem';
      contactInfo.style.backgroundColor = '#f8f8f8';
      contactInfo.style.borderRadius = '8px';
      contactInfo.style.marginBottom = '1rem';
      
      // Style LinkedIn link
      const linkedinLink = modalText.querySelector('.linkedin-link');
      if (linkedinLink) {
        linkedinLink.style.display = 'inline-flex';
        linkedinLink.style.alignItems = 'center';
        linkedinLink.style.gap = '0.5rem';
        linkedinLink.style.backgroundColor = '#C32727';
        linkedinLink.style.color = 'white';
        linkedinLink.style.fontWeight = '600';
        linkedinLink.style.padding = '0.6rem 1rem';
        linkedinLink.style.borderRadius = '20px';
        linkedinLink.style.textDecoration = 'none';
        linkedinLink.style.fontSize = '0.9rem';
        linkedinLink.style.transition = 'all 0.2s ease';
        
        linkedinLink.onmouseover = function() {
          this.style.backgroundColor = '#a31f1f';
          this.style.transform = 'translateY(-2px)';
        };
        
        linkedinLink.onmouseout = function() {
          this.style.backgroundColor = '#C32727';
          this.style.transform = 'translateY(0)';
        };
      }

      // Display modal and prevent body scrolling
      modal.style.display = 'flex';
      document.body.style.overflow = 'hidden';
      
      // Focus trap for accessibility
      setTimeout(() => {
        closeBtn.focus();
      }, 100);
      
      // Responsive adjustments
      handleResponsiveModal();
    }

    // Function for responsive modal adjustments
    function handleResponsiveModal() {
      const modalGrid = document.querySelector('.modal-grid');
      const adjustLayout = () => {
        if (window.innerWidth < 768 && modalGrid) {
          modalGrid.style.gridTemplateColumns = '1fr';
          modalGrid.style.gap = '1rem';
        } else if (modalGrid) {
          modalGrid.style.gridTemplateColumns = 'minmax(200px, 300px) 1fr';
          modalGrid.style.gap = '1.75rem';
        }
      };
      
      // Initial adjustment
      adjustLayout();
      
      // Listen for resize events
      window.addEventListener('resize', adjustLayout);
    }

    // Function to close modal
    function closeModal() {
      modal.classList.add('closing');
      
      setTimeout(() => {
        modal.style.display = 'none';
        modal.classList.remove('closing');
        document.body.style.overflow = 'auto';
        
        // Remove active state from card
        if (currentOpenCard) {
          currentOpenCard.classList.remove('active-card');
          currentOpenCard = null;
        }
      }, 300);
    }

    // Event listeners for opening the modal
    document.querySelectorAll('.member-card').forEach(card => {
      card.addEventListener('click', () => {
        const index = parseInt(card.dataset.memberIndex);
        const memberType = card.dataset.memberType;
        const member = memberType === 'leadership' ? leadershipMembers[index] : otherMembers[index];
        openModal(member, card);
      });
      
      // Keyboard accessibility
      card.setAttribute('tabindex', '0');
      card.addEventListener('keydown', (event) => {
        if (event.key === 'Enter' || event.key === ' ') {
          event.preventDefault();
          card.click();
        }
      });
    });

    // Event listener for closing the modal
    closeBtn.addEventListener('click', closeModal);

    // Close modal when clicking outside the content
    window.addEventListener('click', (event) => {
      if (event.target === modal) {
        closeModal();
      }
    });

    // Close modal when pressing escape key
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && modal.style.display === 'flex') {
        closeModal();
      }
    });
    
    // Intersection Observer for fade-in animations
    const fadeElements = document.querySelectorAll('.fade-in');
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.15,
      rootMargin: '0px 0px -100px 0px'
    });

    fadeElements.forEach(element => {
      observer.observe(element);
    });
  });
</script>