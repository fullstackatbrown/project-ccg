---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/common/Navbar.astro';
import Footer from '../components/common/Footer.astro';
import ServicesSection from '../components/clients/ServicesSection.astro';
import ProcessSection from '../components/clients/ProcessSection.astro';
import ValuesSection from '../components/clients/ValuesSection.astro';
import AnnualReportSection from '../components/common/AnnualReportSection.astro';
import ProjectsSection from '../components/clients/ProjectsSection.astro';
import '../styles/global.css';
import { fetchClients } from '../../contentfulStatic.js';
import { contentfulClient } from "../lib/contentful.ts";
import ClientsSection from '../components/clients/ClientsSection.astro';

const projects = await fetchClients();

const entries = await contentfulClient.getEntries({
  content_type: "images"
});

const headerImage = entries.items
  .filter(entry => entry.fields.title === "Clients - Our Clients")[0]
  ?.fields?.images?.map(image => image.fields?.file?.url) || [];

  const valuesEntries = await contentfulClient.getEntries({
  content_type: "ourValues" // Your actual Content Type ID
});

const values = valuesEntries.items.map(entry => ({
  title: entry.fields.title,
  description: entry.fields.description,
  iconSvg: entry.fields.iconSvg
}));

const serviceEntries = await contentfulClient.getEntries({
  content_type: "ourServices"
});

const services = serviceEntries.items.map((entry) => ({
  title: entry.fields.title,
  description: entry.fields.description,
  imageUrl: entry.fields.iconImage?.fields?.file?.url,
}));


---

<Layout>
  <div class="flex flex-col min-h-screen">
    <Navbar></Navbar>
  
    <!-- Hero Section with Parallax -->
    <section class="relative w-full h-[50vh] md:h-[85vh] flex items-center justify-center overflow-hidden">
      <!-- Background Image with Parallax -->
      <div class="parallax-bg absolute w-full h-full transform scale-110 transition-transform duration-500 ease-out">
        <img 
          src={headerImage[0]}
          alt="group photo" 
          class="w-full h-full object-cover object-center md:object-[50%_20%] transition-all duration-1000"
        >
      </div>

      <!-- Dark Gradient Overlay -->
      <div class="absolute w-full h-full bg-gradient-to-t from-[#0c1445] via-[#0c1445cc] to-[#0c144566]"></div>

      <!-- Overlay Text with Animated Entry -->
      <div class="absolute inset-0 flex flex-col items-start justify-end p-8 md:p-16 lg:p-24 text-content-animation">
        <div class="slide-up-animation">
          <h1 class="text-6xl md:text-7xl lg:text-8xl font-bold text-white mb-6" style="font-family: 'Almarai', sans-serif;">
              Our Clients
          </h1>
          <p class="text-xl md:text-2xl text-white opacity-90 max-w-2xl leading-relaxed">
            Shape your future in consulting with Brown's premier student consulting organization.
          </p>
          <a href="#learn-more" class="mt-8 inline-flex items-center px-8 py-3 bg-gradient-to-r from-[#D32F2F] to-[#B71C1C] text-white font-medium rounded-full hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300">
            Learn More
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2 animate-bounce" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
            </svg>
          </a>
        </div>
      </div>
    </section>

    <ClientsSection />
    <ValuesSection values={values} />
    <ServicesSection services={services} />
    <ProjectsSection />
    <ProcessSection />
    <AnnualReportSection />

    <Footer></Footer>
  </div>
</Layout>


<script>
  document.addEventListener('DOMContentLoaded', () => {
    const parallaxElements = document.querySelectorAll('.parallax-bg');

    let lastScrollY = 0;
    let ticking = false;

    function updateParallax() {
      parallaxElements.forEach(element => {
        const yPos = -(lastScrollY * 0.2);
        element.style.transform = `translateY(${yPos}px)`;
      });
      ticking = false;
    }

    function onScroll() {
      lastScrollY = window.scrollY;
      if (!ticking) {
        window.requestAnimationFrame(updateParallax);
        ticking = true;
      }
    }

    window.addEventListener('load', () => {
      setTimeout(() => {
        window.addEventListener('scroll', onScroll);
        updateParallax();
      }, 700);
    });
  });
</script>